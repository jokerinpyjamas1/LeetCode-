### Day1刷题日志

#Finish reading 数组理论基础
过去不注重理论知识，对于数组概念比较模糊。
重读之后对于数组有了全新的认知。


###
704. 二分查找
通过不断二分index， 寻找target
易错： 1.while循环 break条件 < or <=
      2. if list[i] > target:
            right = middle or middle -1?
左闭右闭[a,b]  incluede a, b
左闭右开[a,b)  include a but not b

左闭右闭[a,b] 情况
区间是不变量，开始是左闭右闭， all codes needs to be [a,b]

Needs to determine if [a,b], allows a = b, then in while a <= b works 
                   if [a,b), not allow a = b, then in while a < b works 
pseudocode：
left = 0
right = numsize - 1
while left <= right:
      middle = (left + right) /2 注意是否越界
      if nums[middle] > target,  当target在middle的左边
(右边界为闭区间，middle已经必然大于target，区间已经不续约不包含middle，所以middle - 1) 
            '''update right'''
            right = middle - 1 
      else if nums[middle] < target: 当target在middle的右边
(左边界为闭区间，middle已经必然小于target，区间已经不需要包含middle，所以middle + 1) 
            left = middle + 1 
      else
            return middle 
都没找到，则
return -1

左闭右开[a,b） 情况， [a,b), not allow a = b
pseudocode：
left = 0
right = numsize
while left < right: 只有left < right 才有意义
      middle = (left + right) /2 注意是否越界
      if nums[middle] > target,  当target在middle的左边
      （由于区间左闭右开，更新左区间的右边界，搜索区间本身不包含right，所以right = middle即可）
            '''update right'''
            right = middle  
      else if nums[middle] < target: 当target在middle的右边
(左边界为闭区间，middle已经必然小于target，区间已经不需要包含middle，所以middle + 1) 
            left = middle + 1 
      else
            return middle 
都没找到，则
return -1


###
27. 移除元素  
数组中不存在删除只存在覆盖

双指针思路:
1|2|3|4|3|5 一层for循环解决两层for循环完成的内容
1. 定义两个不同指针，一个fast， 一个slow
2. fast,获取新数组需要的元素
3. slow，获取新数组中元素所在的位置，即index值

pseudocode：
快慢指针都是从0开始
        slow = 0
        fast = 0
        for i in range(len(nums)):
            if nums[fast] != val: （当快指针所对应数组值与所需删除值不相等时，将用快指针对应值替换慢指针对应值）
                nums[slow] = nums[fast]
                slow += 1
            fast += 1
        return slow

理解方向：
nums = 1|2|3 需要删除 2
当fast = 0， slow = 0时
nums[fast]为1， 和删除值不等，即需要赋值nums[slow]为nums[fast]
fast，slow各自增加1
当fast = 1， slow = 1时
nums[fast]为2， 和删除值相符，即跳过改变nums[slow]这步
fast增加1，slow不变即 fast = 2，slow = 1
nums[fast]为3， 和删除值不等，即需要赋值nums[slow]为nums[fast]
fast，slow各自增加1
此时nums 变成
1|3|3
返回slow值则为新数组的长度



